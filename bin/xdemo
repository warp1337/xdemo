#!/usr/bin/env python

"""

This file is part of XDEMO

Copyright(c) <Florian Lier>
https://github.com/warp1337/xdemo

This file may be licensed under the terms of the
GNU Lesser General Public License Version 3 (the ``LGPL''),
or (at your option) any later version.

Software distributed under the License is distributed
on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
express or implied. See the LGPL for the specific language
governing rights and limitations.

You should have received a copy of the LGPL along with this
program. If not, go to http://www.gnu.org/licenses/lgpl.html
or write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

The development of this software was supported by the
Excellence Cluster EXC 277 Cognitive Interaction Technology.
The Excellence Cluster EXC 277 is a grant of the Deutsche
Forschungsgemeinschaft (DFG) in the context of the German
Excellence Initiative.

Authors: Florian Lier
<flier>@techfak.uni-bielefeld.de

"""

# STD
import time
import logging
import multiprocessing

# SELF
from xdemo.container.system import SystemInstance
from xdemo.parsing.yamlconfig import SystemConfig
from xdemo.launcher.systemlauncher import SystemLauncher

# LOGGING
from colorlog import ColoredFormatter

if __name__ == "__main__":

    logger = logging.getLogger("xdemo")
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s", "%H:%M:%S")
    formatter = ColoredFormatter(
        "%(asctime)s-%(log_color)s%(levelname)s-%(reset)s%(white)s%(message)s",
        datefmt="%H:%M:%S",
        reset=True,
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'blue',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red'
        }
    )
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    logger.info("[XDEMO START]")

    config = "/tmp/etc/xdemo/systems/basic-example/linux-example.yaml"
    sc = SystemConfig(config, logger)
    si = SystemInstance(sc, logger)
    sl = SystemLauncher(si, logger)

    read_task_queue = multiprocessing.Queue()
    p = multiprocessing.Process(target=sl.deploy_tasks, args=(read_task_queue,))
    p.start()

    while read_task_queue.empty():
        time.sleep(0.05)

    logger.info("[deployer] deployed all tasks [OK]")

    p.join()

    logger.info("[XDEMO END]")

