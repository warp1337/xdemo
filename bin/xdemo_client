#!/usr/bin/env python

"""

This file is part of XDEMO

Copyright(c) <Florian Lier>
https://github.com/warp1337/xdemo_client

This file may be licensed under the terms of the
GNU Lesser General Public License Version 3 (the ``LGPL''),
or (at your option) any later version.

Software distributed under the License is distributed
on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
express or implied. See the LGPL for the specific language
governing rights and limitations.

You should have received a copy of the LGPL along with this
program. If not, go to http://www.gnu.org/licenses/lgpl.html
or write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

The development of this software was supported by the
Excellence Cluster EXC 277 Cognitive Interaction Technology.
The Excellence Cluster EXC 277 is a grant of the Deutsche
Forschungsgemeinschaft (DFG) in the context of the German
Excellence Initiative.

Authors: Florian Lier
<flier>@techfak.uni-bielefeld.de

"""

# STD
import os
import sys
import time
import signal
import logging
from optparse import OptionParser

# LOG
from colorlog import ColoredFormatter

# SELF
from xdemo.parsing.config import SystemConfig
from xdemo.container.system import SystemInstance
from xdemo.screenutils.screenclient import ScreenPool
from xdemo.launcher.syslaunch import SystemLauncherClient
from xdemo.utilities.operatingsystem import get_operating_system, get_localhost_name

if __name__ == "__main__":

    ### OS ####

    this_client_pid = os.getpid()

    ### LOGGING ####

    logger = logging.getLogger("xdemo_client")
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = ColoredFormatter(
        "%(asctime)s|%(log_color)s%(levelname).4s %(reset)s%(white)s%(message)s",
        datefmt="%H:%M:%S",
        reset=True,
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'blue',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red'
        }
    )
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    ### FOLDERS AND PLATFORM ####

    target_platform = get_operating_system().strip()

    log_folder = ""

    if target_platform == 'posix' or target_platform == 'darwin':
        user = os.environ['USER']
        log_folder = "/tmp/xdemo_client/"+user+"/logs/"
        os.system("mkdir -p " + log_folder)
    else:
        logger.error("Windows[C] support not yet implemented")
        sys.exit(1)

    local_hostname = get_localhost_name().strip()

    ### OPTIONS ####

    parser = OptionParser(usage="Usage: %prog [options]",

                          version="%prog 0.1")

    parser.add_option("-c", "--config",
                      action="store",
                      dest="configfile",
                      help="xdemo system config file [*.yaml]")

    parser.add_option("-l", "--localhost",
                      action="store_true",
                      dest="localhost_mode",
                      default=False,
                      help="force overwrite host settings and execute locally")

    (options, args) = parser.parse_args()

    if not options.configfile:
        logger.error("no *.yaml config provided")
        parser.print_help()
        sys.exit(1)

    cfg = str(options.configfile)

    if not os.path.exists(cfg):
        logger.error("the *.yaml file '%s' does not exist!" % cfg)
        sys.exit(1)

    logger.info("[ XDEMO CLIENT START | %s | %s | PID %s ]" % (local_hostname, target_platform, this_client_pid))

    ### SIGTRAP ###

    exit_grace = False


    def signal_handler(signum, frame):
        global exit_grace
        logger.warning("[ CTRL+C ] UH OH ... trying to terminate gracefully")
        exit_grace = True


    signal.signal(signal.SIGINT, signal_handler)

    ### BOOTSTRAPPING ####

    cfg = options.configfile.strip()
    local_mode = options.localhost_mode

    sc = SystemConfig(cfg, logger, local_hostname, target_platform, local_mode)
    si = SystemInstance(sc, logger, log_folder)
    sp = ScreenPool(logger, log_folder)
    sl = SystemLauncherClient(si, sp, logger)
    sl.mk_screen_sessions()

    logger.info("[ XDEMO CLIENT RUNNING | %s | %s | PID %s ]" % (local_hostname, target_platform, this_client_pid))

    ### LOOP ####

    while not exit_grace:
        time.sleep(0.1)

    ### DE-BOOTSTRAPPING ####

    sl.stop_all_observers()
    sp.kill_all_screen_sessions()

    logger.info("[ XDEMO CLIENT STOP | %s | %s | PID %s ]" % (local_hostname, target_platform, this_client_pid))
