#!/usr/bin/env python

"""

This file is part of XDEMO

Copyright(c) <Florian Lier>
https://github.com/warp1337/xdemo_client

This file may be licensed under the terms of the
GNU Lesser General Public License Version 3 (the ``LGPL''),
or (at your option) any later version.

Software distributed under the License is distributed
on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
express or implied. See the LGPL for the specific language
governing rights and limitations.

You should have received a copy of the LGPL along with this
program. If not, go to http://www.gnu.org/licenses/lgpl.html
or write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

The development of this software was supported by the
Excellence Cluster EXC 277 Cognitive Interaction Technology.
The Excellence Cluster EXC 277 is a grant of the Deutsche
Forschungsgemeinschaft (DFG) in the context of the German
Excellence Initiative.

Authors: Florian Lier
<flier>@techfak.uni-bielefeld.de

"""

# STD
import os
import sys
import time
import signal
import logging
from optparse import OptionParser

# SELF
from xdemo.container.system import SystemInstance
from xdemo.parsing.yamlconfig import SystemConfig
from xdemo.connections.screenclient import ScreenPool
from xdemo.launcher.systemlauncher import SystemLauncherClient
from xdemo.utilities.operatingsystem import get_operating_system, get_localhost_name

# LOGGING
from colorlog import ColoredFormatter

if __name__ == "__main__":

    ### LOGGING ####

    logger = logging.getLogger("xdemo_client")
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s", "%H:%M:%S")
    formatter = ColoredFormatter(
        "%(asctime)s-%(log_color)s%(levelname)s-%(reset)s%(white)s%(message)s",
        datefmt="%H:%M:%S",
        reset=True,
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'blue',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red'
        }
    )
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    ### FOLDERS AND PLATFORM ####

    target_platform = get_operating_system()

    if target_platform == 'posix' or target_platform == 'darwin':
        os.system("mkdir -p /tmp/xdemo_client/logs/")
    else:
        logger.error("Windows[C] support not yet implemented")
        sys.exit(1)

    hostname = get_localhost_name()

    ### OPTIONS ####

    parser = OptionParser(usage="Usage: %prog [options] PATH_TO_CFG_FILE.yaml",

                          version="%prog 0.1")

    parser.add_option("-c", "--config",

                      action="store",

                      dest="configfile",

                      help="the xdemo system config")

    (options, args) = parser.parse_args()

    if not os.path.exists(options.configfile):
        print "\n\n"

        parser.error("The *.yaml file '%s' does not exist!" % args[0])

        sys.exit(1)

    logger.info("[ XDEMO CLIENT START | %s ]" % hostname)

    ### SIGTRAP ###

    exit_grace = False


    def signal_handler(signum, frame):
        global exit_grace
        logger.warning("[ CTRL+C ] trying to gracefully terminate")
        exit_grace = True


    signal.signal(signal.SIGINT, signal_handler)

    ### BOOTSTRAPPING ####

    sc = SystemConfig(options.configfile, logger, hostname, target_platform)
    si = SystemInstance(sc, logger)
    sp = ScreenPool(logger)
    sl = SystemLauncherClient(si, sp, logger)
    sl.mk_screen_sessions()
    sl.deploy_commands()

    logger.info("[ XDEMO CLIENT RUNNING | %s ]" % hostname)
    ### LOOP ####

    while not exit_grace:
        time.sleep(0.1)

    ### DE-BOOTSTRAPPING ####

    sp.kill_all_screen_sessions()

    logger.info("[ XDEMO CLIENT STOP | %s ]" % hostname)
